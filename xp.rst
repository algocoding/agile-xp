===================================
XP 소개
===================================


소개
======================

**XP** 는 사회적 변화에 대한 것이다.
    - 과거의 좋지 않느 습관과 양식을 버려야 한다.
    - 생산성을 저해하는 방어 수산을 포기하자.


성공을 준비하라. 성공에서 한 발 물러나 자신을 보호하지 말라. 최선을 다한 후에 다음 결과에 대처하라. 이것이 극단(extreme)이다.

**XP** 는 이전에 우리가 생각도 하지 못한 일을 할 수 있게 해주는, 프로그래밍 기법과 명확한 의사소통, 팀워크를 향상시키는데 집중하는 소프트웨어 개발 방법이다.

포함하는 요소들:

    - 의사소통, 피드백, 산순성, 용기, 존중의 가치를 중시.
    - 소프트웨어 개발을 개선하는데 유용하고 증명된 실천 방법들의 집합.
    - 상호 보완적인 원칙들. 가치를 실천하는 방법으로 옮기는 지적 기법들의 집합.
    - 가치를 서로 공유하고, 동일한 실천 방법들을 공유하는 공동체.

**XP** 와 다른 개발 방법론과의 차이점:
-------------------------------------------

- 짧은 개발 주기: 개발 초기 부터 구체적이고 지속적은 반응을 얻을 수 있다.
- 점진적 접근 방법: 전체 계획을 빨리 구성해서 시작하고, 프로젝트 생명 주기 동안 그 계획이 진화할 것이라 기대한다.
- 자동화된 테스트: 개발 진행 상황을 관찰하고 시스템을 진화시키면서, 초기부터 결합을 잡을 수 있게 한다.
- 진화적인 설계 절차
- 비즈니스 쪽의 요구에 대응할 수 있는 유연한 개발 일정 수립.
- 열심히 참여하는 평범한 개인들 사이의 협력에 의존한다.
- 팀원들의 단기적, 장기적 이해 관계에 적용되는 실천 방법들


**XP** 는 소프트웨어 개발 업무에서 인간성과 생산성을 조화시키고, 그것을 남들과 공유하려는 노력이다.

- 팀의 목표에 기여하하기 위해 팀원들은 높은 수준의 기술 습득을 요구 받는다.
- 상처 받을 수 있는 것이 오히려 더 안전한 것이다. 실패하더라도 최선을 다하기만 하면 만족감을 느낄 수 있다.
- 다른 사람의 기대를 관리하는 것은 내 일이 아니다. 최선을 다하는 것과 의사소통을 명확히 하는 것이 나의 몫이다.


**XP** 는 어떻게 위험 요소들에 대처할까?
---------------------------------------------

- 일정 지연 -> 짧은 릴리즈 주기(short release)
- 프로젝트 취소 -> 우선 순위가 높고, 가장 작은 릴리즈를 선택
- 시스템 이상 -> 자동화 테스트 슈트
- 결합 비율 -> 개발자 및 고객의 두 관점에서 모두 테스트
- 비즈니스에 대한 오해 -> 비즈니스쪽 사람들도 정규 팀원
- 비즈니스 변화 -> 짧은 릴리즈 주기
- 명목뿐인 기능 -> 우선순위가 높은 릴리즈 선택
- 직원 교체 -> 의사소통, 격려, 기존 프로그래머들의 도움

**XP** 는 당신을 팀의 일부로 생각하고, 다른 팀원들과 함께 일하고 싶어한다고 가정한다. 또한, 당신이 능력을 개발하고, 성장하고 관계를 발전시키길 원한다고 가정한다. 이를 위해, 기꺼이 변화를 감수한다고 가정한다.


소프트웨어 팀들이 공통적으로 가지는 무엇인가에 대해 논의하고 검증된 실천방법들을 제시한다.

- **XP** 는 낡고, 효과가 없는 사회적 습관들을 버리고, 새롭고 효과 있는 습관들을 채택한다.
- **XP** 는 오늘 기울인 자신의 노력을 인전해 주는 것이다.
- **XP** 는 내일은 좀 더 나아지기 위해 노력하는 것이다.
- **XP** 는 팀 목표에 얼마나 기여했는지 자신을 평가하는 것이다.
- **XP** 는 소프트웨어 개발을 하는 중에도 당신의 인간적 욕구 중 일부를 채우겠다고 요구하는 것이다.

.. note:: 
    
    **XP** 패러다임 "깨어 있으며, 적응하고 변해라."
        
        - 소프트웨어의 모든 것은 변한다.
        - 요구사항은 변한다.
        - 설계도 변한다.
        - 비즈니스도 변한다.
        - 기술도 변한다.
        - 팀도 변하고, 팀 구성도 변한다.

        변화는 반드시 일어난다. 변화는 문제가 아니다. 변화를 이겨내지 못하는 것이 문제다.
